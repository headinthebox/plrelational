// GENERATED CODE DO NOT EDIT OR TOUCH
//
// Generated using genmodel.swift from genmodel.template.
//
// To make changes to all models, edit genmodel.template.
// (Note: Xcode will not automatically rebuild after editing
// that file. Clean build, or touch all .model files.)
//
// To add additional functionality to these types, create
// an extension in another file.

final class MODEL_NAME: Model, CustomStringConvertible {
    static let name = "MODEL_NAME"
    
    static let attributes = [
        Attribute("FIELD_NAME"),
    ]
    
    struct Attributes {
        static let FIELD_NAME = Attribute("FIELD_NAME")
    }
    
    var owningDatabase: ModelDatabase
    
    var objectID: Int64?
    
    var FIELD_NAME: FIELD_TYPE
    
    var TO_MANY_FIELD_NAME: ModelToManyRelation<TO_MANY_FIELD_TYPE> { return try! owningDatabase.fetch(TO_MANY_FIELD_TYPE.self, ownedBy: self) }
    
    init(
        owningDatabase: ModelDatabase,
        FIELD_NAME: FIELD_TYPE,
        objectID: Int64? = nil
    ) {
        self.owningDatabase = owningDatabase
        self.FIELD_NAME = FIELD_NAME
        self.objectID = objectID
    }
    
    static func fromRow(owningDatabase: ModelDatabase, _ row: Row) throws -> MODEL_NAME {
        let objectID = row.values["objectID"].flatMap({ $0.get() as Int64? })
        
        return MODEL_NAME(
            owningDatabase: owningDatabase,
            FIELD_NAME: try unwrapOrThrow(row["FIELD_NAME"].get(), "FIELD_NAME"),
            objectID: objectID
        )
    }
    
    private static func unwrapOrThrow<T>(value: T?, _ attribute: String) throws -> T {
        if let value = value {
            return value
        } else {
            throw ModelError.BadDataType(attribute: attribute)
        }
    }
    
    func toRow() -> Row {
        var row = Row(values: [
            "FIELD_NAME": RelationValue(FIELD_NAME),
        ])
        if let objectID = objectID {
            row["objectID"] = RelationValue(objectID)
        }
        return row
    }
    
    var description: String {
        let objectIDString = objectID.map(String.init) ?? "NULL"
        let pieces = [
            "objectID: \(objectIDString)",
            "FIELD_NAME: \(FIELD_NAME)",
        ]
        let joined = pieces.joinWithSeparator(", ")
        let full = "\(self.dynamicType)(\(joined))"
        return full
    }
}
