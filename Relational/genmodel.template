// GENERATED CODE DO NOT EDIT OR TOUCH
//
// Generated using genmodel.swift from genmodel.template.
//
// To make changes to all models, edit genmodel.template.
// (Note: Xcode will not automatically rebuild after editing
// that file. Clean build, or touch all .model files.)
//
// To add additional functionality to these types, create
// an extension in another file.

import libRelational

final class MODEL_NAME: Model, CustomStringConvertible {
    static let name = "MODEL_NAME"
    
    static let attributes = [
        Attribute("FIELD_NAME"),
        Attribute("objectID")
    ]
    
    struct Attributes {
        static let FIELD_NAME = Attribute("FIELD_NAME")
    }
    
    var owningDatabase: ModelDatabase
    
    let changeObservers = ObserverSet<Model>()
    
    var objectID: ModelObjectID
    
    var FIELD_NAME: FIELD_TYPE { didSet { changeObservers.notify(self) } }
    
    var TO_MANY_FIELD_NAME: Result<ModelToManyRelation<TO_MANY_FIELD_TYPE>, RelationError> { return owningDatabase.fetch(TO_MANY_FIELD_TYPE.self, ownedBy: self) }
    
    init(
        owningDatabase: ModelDatabase,
        FIELD_NAME: FIELD_TYPE,
        objectID: ModelObjectID = ModelObjectID.new()
    ) {
        self.owningDatabase = owningDatabase
        self.FIELD_NAME = FIELD_NAME
        self.objectID = objectID
    }
    
    static func fromRow(owningDatabase: ModelDatabase, _ row: Row) -> Result<MODEL_NAME, RelationError> {
        guard let FIELD_NAME: FIELD_TYPE = row["FIELD_NAME"].get() else { return .Err(ModelError.BadDataType(attribute: "FIELD_NAME")) }
        guard let objectID: [UInt8] = row["objectID"].get() else { return .Err(ModelError.BadDataType(attribute: "objectID")) }
        return .Ok(MODEL_NAME(
            owningDatabase: owningDatabase,
            FIELD_NAME: FIELD_NAME,
            objectID: ModelObjectID(value: objectID)))
    }
    
    func toRow() -> Row {
        let row = Row(values: [
            "FIELD_NAME": RelationValue(FIELD_NAME),
            "objectID": RelationValue(objectID.value)
        ])
        return row
    }
    
    var description: String {
        let pieces = [
            "objectID: \(objectID)",
            "FIELD_NAME: \(FIELD_NAME)",
        ]
        let joined = pieces.joinWithSeparator(", ")
        let full = "\(self.dynamicType)(\(joined))"
        return full
    }
}
